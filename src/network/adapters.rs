// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏

use serde_json;

#[derive(Clone, Default)]
pub struct NetworkAdapter {
    pub name: String,
    pub mac_address: String,
    pub ip_addresses: Vec<String>,
    pub dns_servers: Vec<String>,
    pub connection_type: String, // WiFi, Ethernet, etc.
    pub gateway: String,
    pub is_online: bool,
    pub ping_to_gateway: Option<f64>, // –≤ ms
    pub connection_speed: String, // Mbps –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
}

pub fn get_network_adapters() -> Vec<NetworkAdapter> {
    let command = r#"Get-NetAdapter | Where-Object { $_.Status -eq 'Up' } | ForEach-Object {
    $adapter = $_
    $ip_info = Get-NetIPAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4 | Select-Object -First 1
    $dns_info = Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–ª—é–∑–µ
    $route_info = Get-NetRoute -InterfaceAlias $adapter.Name -AddressFamily IPv4 | Where-Object { $_.DestinationPrefix -eq '0.0.0.0/0' } | Select-Object -First 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    $connection_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if ($adapter.Name -like "*Wi-Fi*" -or $adapter.Name -like "*Wireless*" -or $adapter.Name -like "*WiFi*") {
        $connection_type = "WiFi"
    } elseif ($adapter.Name -like "*Ethernet*" -or $adapter.Name -like "*LAN*" -or $adapter.PhysicalMediaType -eq "802.3") {
        $connection_type = "Ethernet"
    } elseif ($adapter.PhysicalMediaType -eq "Wireless LAN") {
        $connection_type = "WiFi"
    } elseif ($adapter.PhysicalMediaType -eq "802.11") {
        $connection_type = "WiFi"
    }

    [PSCustomObject]@{
        Name = $adapter.Name
        Status = $adapter.Status.ToString()
        MacAddress = $adapter.MacAddress
        IPAddress = if ($ip_info) { $ip_info.IPAddress } else { "N/A" }
        DNSServers = if ($dns_info.ServerAddresses) { $dns_info.ServerAddresses -join ", " } else { "N/A" }
        ConnectionType = $connection_type
        Gateway = if ($route_info) { $route_info.NextHop } else { "N/A" }
    }
} | ConvertTo-Json"#;

    match run_powershell_command(command) {
        Ok(json_result) => {
            // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            match serde_json::from_str::<Vec<serde_json::Value>>(&json_result) {
                Ok(adapters_json) => {
                    let mut adapters = Vec::new();
                    for adapter_json in adapters_json {
                        if let (Some(name), Some(_status), Some(mac), Some(ip), Some(dns), Some(conn_type), Some(gateway)) = (
                            adapter_json.get("Name").and_then(|v| v.as_str()),
                            adapter_json.get("Status").and_then(|v| v.as_str()),
                            adapter_json.get("MacAddress").and_then(|v| v.as_str()),
                            adapter_json.get("IPAddress").and_then(|v| v.as_str()),
                            adapter_json.get("DNSServers").and_then(|v| v.as_str()),
                            adapter_json.get("ConnectionType").and_then(|v| v.as_str()),
                            adapter_json.get("Gateway").and_then(|v| v.as_str()),
                        ) {
                            let ip_addresses = if ip != "N/A" {
                                vec![ip.to_string()]
                            } else {
                                vec!["–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω".to_string()]
                            };

                            let dns_servers = if dns != "N/A" {
                                dns.split(", ").map(|s| s.to_string()).collect()
                            } else {
                                vec!["–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω".to_string()]
                            };

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à–ª—é–∑–∞
                            let (is_online, ping_time) = if gateway != "N/A" && !gateway.is_empty() {
                                let ping_result = ping_gateway(gateway);
                                (ping_result.is_some(), ping_result)
                            } else {
                                (false, None)
                            };

                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞
                            let connection_speed = match ping_time {
                                Some(ping) if ping < 10.0 => "–û—Ç–ª–∏—á–Ω–æ–µ (üåü)".to_string(),
                                Some(ping) if ping < 50.0 => "–•–æ—Ä–æ—à–µ–µ (‚úÖ)".to_string(),
                                Some(ping) if ping < 150.0 => "–°—Ä–µ–¥–Ω–µ–µ (‚ö†Ô∏è)".to_string(),
                                Some(ping) if ping < 500.0 => "–ü–ª–æ—Ö–æ–µ (‚ùå)".to_string(),
                                Some(_) => "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ (üíÄ)".to_string(),
                                None => "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (üö´)".to_string(),
                            };

                            adapters.push(NetworkAdapter {
                                name: name.to_string(),
                                mac_address: mac.to_string(),
                                ip_addresses,
                                dns_servers,
                                connection_type: conn_type.to_string(),
                                gateway: gateway.to_string(),
                                is_online,
                                ping_to_gateway: ping_time,
                                connection_speed,
                            });
                        }
                    }
                    adapters
                }
                Err(_) => vec![NetworkAdapter {
                    name: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö".to_string(),
                    mac_address: "N/A".to_string(),
                    ip_addresses: vec!["N/A".to_string()],
                    dns_servers: vec!["N/A".to_string()],
                    connection_type: "N/A".to_string(),
                    gateway: "N/A".to_string(),
                    is_online: false,
                    ping_to_gateway: None,
                    connection_speed: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (üö´)".to_string(),
                }],
            }
        }
        Err(_) => vec![NetworkAdapter {
            name: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã".to_string(),
            mac_address: "N/A".to_string(),
            ip_addresses: vec!["N/A".to_string()],
            dns_servers: vec!["N/A".to_string()],
            connection_type: "N/A".to_string(),
            gateway: "N/A".to_string(),
            is_online: false,
            ping_to_gateway: None,
            connection_speed: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (üö´)".to_string(),
        }],
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞ –¥–æ —à–ª—é–∑–∞
fn ping_gateway(gateway: &str) -> Option<f64> {
    use std::process::Command;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ping.exe –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ —à–ª—é–∑–∞
    match Command::new("ping")
        .arg("-n").arg("1")  // –û–¥–∏–Ω –ø–∞–∫–µ—Ç
        .arg("-w").arg("2000")  // –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã
        .arg(gateway)
        .output()
    {
        Ok(output) => {
            let stdout = String::from_utf8_lossy(&output.stdout);

            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ping.exe
            if let Some(time_line) = stdout.lines().find(|line| line.contains("time=")) {
                if let Some(time_part) = time_line.split("time=").nth(1) {
                    if let Some(ms_str) = time_part.split("ms").next() {
                        if let Ok(ms) = ms_str.trim().parse::<f64>() {
                            return Some(ms);
                        }
                    }
                }
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
            if let Some(time_line) = stdout.lines().find(|line| line.contains("–≤—Ä–µ–º—è=")) {
                if let Some(time_part) = time_line.split("–≤—Ä–µ–º—è=").nth(1) {
                    if let Some(ms_str) = time_part.split("–º—Å").next() {
                        if let Ok(ms) = ms_str.trim().parse::<f64>() {
                            return Some(ms);
                        }
                    }
                }
            }

            None
        }
        Err(_) => None,
    }
}

fn run_powershell_command(command: &str) -> Result<String, String> {
    use std::process::Command;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ipconfig –∏–ª–∏ netsh - –∏—Å–ø–æ–ª—å–∑—É–µ–º cmd —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
    if command.contains("ipconfig") || command.contains("netsh") {
        let output = Command::new(r"C:\Windows\System32\cmd.exe")
            .arg("/C")
            .arg(command)
            .output()
            .map_err(|e| format!("Failed to execute command: {}", e))?;

        let stdout = String::from_utf8_lossy(&output.stdout).trim().to_string();
        let stderr = String::from_utf8_lossy(&output.stderr).trim().to_string();

        if output.status.success() {
            Ok(stdout)
        } else {
            Err(stderr)
        }
    } else {
        // –î–ª—è PowerShell –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell
        let output = Command::new(r"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe")
            .arg("-Command")
            .arg(command)
            .output()
            .map_err(|e| format!("Failed to execute command: {}", e))?;

        let stdout = String::from_utf8_lossy(&output.stdout).trim().to_string();
        let stderr = String::from_utf8_lossy(&output.stderr).trim().to_string();

        if output.status.success() {
            Ok(stdout)
        } else {
            Err(stderr)
        }
    }
}
