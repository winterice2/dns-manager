// –ú–æ–¥—É–ª—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∫–ª–∞–¥–æ–∫

use egui::{Context, Ui};

use crate::DNSManager;

pub fn show_main_tab(app: &mut DNSManager, ui: &mut Ui, ctx: &Context) {
        ui.vertical_centered(|ui| {
            ui.heading("üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
        });
        ui.separator();

        // Satellite Control
        ui.label("üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å:");
        ui.label("üîÑ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–∞–ª–∞–∫—Ç–∏–∫–∞–º–∏");

        if ui.add_sized([ui.available_width(), 40.0], egui::Button::new("üöÄ Launch/Landing DNS")).clicked() {
            app.status = "üõ∏ Navigation system activated...".to_string();
            ctx.request_repaint();

            match crate::dns::providers::get_current_dns() {
                Ok(current) => {
                    if current.contains("1.1.1.1") || current.contains("8.8.8.8") || current.contains("9.9.9.9") || current.contains("208.67.222.222") || current.contains("94.140.14.14") {
                        // Reset to automatic
                        match crate::dns::providers::reset_dns() {
                            Ok(_) => app.status = "üîÑ Returned to autopilot".to_string(),
                            Err(e) => app.status = format!("üí• System failure: {}", e),
                        }
                    } else {
                        app.status = "üåå Coordinates received".to_string();
                    }
                }
                Err(e) => app.status = format!("üí• Hyperspace jump failed: {}", e),
            }
        }

        ui.add_space(10.0);

        if ui.add_sized([ui.available_width(), 40.0], egui::Button::new("üõ∞Ô∏è Space Scanning")).clicked() {
            match crate::dns::providers::get_current_dns() {
                Ok(dns) => app.status = format!("üõ∞Ô∏è Coordinates received: {}", dns),
                Err(e) => app.status = format!("üí´ Cosmic noise: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(10.0);

        if ui.add_sized([ui.available_width(), 40.0], egui::Button::new("üîÑ Reset to DHCP")).clicked() {
            match crate::dns::providers::reset_dns() {
                Ok(_) => app.status = "üîÑ Returned to autopilot".to_string(),
                Err(e) => app.status = format!("üí• Engine failure: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(20.0);
        ui.label("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:");
        ui.add_space(5.0);
        let _ = ui.selectable_label(false, &app.status);
    }

    pub fn show_providers_tab(app: &mut DNSManager, ui: &mut Ui, ctx: &Context) {
        ui.vertical_centered(|ui| {
            ui.heading("üåç –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ DNS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤");
        });
        ui.separator();

        ui.label("‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ DNS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:");
        ui.add_space(15.0);

        // Cloudflare
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("‚òÅÔ∏è Cloudflare DNS\n1.1.1.1, 1.0.0.1")).clicked() {
            match crate::dns::providers::set_dns("1.1.1.1", "1.0.0.1") {
                Ok(_) => app.status = "üéâ Arrived at Cloudflare: 1.1.1.1, 1.0.0.1!".to_string(),
                Err(e) => app.status = format!("üí• Ship crashed: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(8.0);

        // Google
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("üîç Google DNS\n8.8.8.8, 8.8.4.4")).clicked() {
            match crate::dns::providers::set_dns("8.8.8.8", "8.8.4.4") {
                Ok(_) => app.status = "üéâ Welcome to Google: 8.8.8.8, 8.8.4.4!".to_string(),
                Err(e) => app.status = format!("üí• System malfunction: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(8.0);

        // Quad9
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("üîí Quad9 DNS\n9.9.9.9, 149.112.112.112")).clicked() {
            match crate::dns::providers::set_dns("9.9.9.9", "149.112.112.112") {
                Ok(_) => app.status = "üéâ Secured with Quad9: 9.9.9.9, 149.112.112.112!".to_string(),
                Err(e) => app.status = format!("üí• Security breach: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(8.0);

        // OpenDNS
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ OpenDNS\n208.67.222.222, 208.67.220.220")).clicked() {
            match crate::dns::providers::set_dns("208.67.222.222", "208.67.220.220") {
                Ok(_) => app.status = "üéâ Family protection activated!".to_string(),
                Err(e) => app.status = format!("üí• Family emergency: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(8.0);

        // AdGuard
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("üö´ AdGuard DNS\n94.140.14.14, 94.140.15.15")).clicked() {
            match crate::dns::providers::set_dns("94.140.14.14", "94.140.15.15") {
                Ok(_) => app.status = "üéâ Ads blocked: 94.140.14.14, 94.140.15.15!".to_string(),
                Err(e) => app.status = format!("üí• Ad blocking failure: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(8.0);

        // CleanBrowsing
        if ui.add_sized([ui.available_width(), 45.0], egui::Button::new("üßπ CleanBrowsing\n185.228.168.9, 185.228.169.9")).clicked() {
            match crate::dns::providers::set_dns("185.228.168.9", "185.228.169.9") {
                Ok(_) => app.status = "üéâ Clean browsing activated!".to_string(),
                Err(e) => app.status = format!("üí• Cleaning failure: {}", e),
            }
            ctx.request_repaint();
        }

        ui.add_space(20.0);
        ui.label("üí° –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ç–µ–≤—ã–º –∞–¥–∞–ø—Ç–µ—Ä–∞–º");
    }

    pub fn show_lab_tab(app: &mut DNSManager, ui: &mut Ui, ctx: &Context) {
        ui.vertical_centered(|ui| {
            ui.heading("üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        });
        ui.separator();

        ui.label("‚öóÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
        ui.add_space(10.0);

        // DNS Speed Test
        let button_text = if app.is_speed_testing {
            "‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...".to_string()
        } else {
            "‚ö° DNS Speed Test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã".to_string()
        };

        if ui.add_sized([ui.available_width(), 40.0], egui::Button::new(button_text)).clicked() && !app.is_speed_testing {
            app.start_speed_test();
            ctx.request_repaint();
        }

        ui.add_space(10.0);
        ui.label("üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");

        // Speed Test Results
        if !app.speed_results.is_empty() {
            ui.add_space(10.0);
            ui.label("üìä –°–∫–æ—Ä–æ—Å—Ç—å DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ):");

            ui.separator();

            for (index, result) in app.speed_results.iter().enumerate() {
                let medal = match index {
                    0 => "[1]".to_string(),
                    1 => "[2]".to_string(),
                    2 => "[3]".to_string(),
                    _ => format!("[{}]", index + 1),
                };

                let avg_text = match result.avg_ping {
                    Some(avg) => format!("{:.1}ms", avg),
                    None => "N/A".to_string(),
                };

                let primary_text = match result.primary_ping {
                    Some(p) => format!("{:.1}ms", p),
                    None => "‚ùå".to_string(),
                };

                let secondary_text = match result.secondary_ping {
                    Some(p) => format!("{:.1}ms", p),
                    None => "‚ùå".to_string(),
                };

                ui.horizontal(|ui| {
                    ui.label(format!("{} {}:", medal, result.provider));
                    ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                        ui.label(format!("Avg: {} | P1: {} | P2: {}", avg_text, primary_text, secondary_text));
                    });
                });
            }

            ui.add_space(5.0);
            ui.small("üí° –ß–µ–º –º–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ - —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ DNS!");
        } else {
            ui.add_space(10.0);
            ui.label("üî≠ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
        }
    }

    pub fn show_network_tab(app: &mut DNSManager, ui: &mut Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏");
        });
        ui.separator();

        ui.label("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö:");
        ui.add_space(10.0);

        if ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏").clicked() {
            app.network_adapters = crate::network::adapters::get_network_adapters();
            app.status = "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!".to_string();
        }

        ui.add_space(10.0);

        if app.network_adapters.is_empty() {
            ui.label("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤");
        } else {
            for adapter in &app.network_adapters {
                ui.add_space(5.0);
                ui.label(format!("üîå **{}** ({})", adapter.name, adapter.status));

                ui.horizontal(|ui| {
                    ui.label("üìç MAC –∞–¥—Ä–µ—Å:");
                    ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                        ui.label(&adapter.mac_address);
                    });
                });

                ui.horizontal(|ui| {
                    ui.label("üåê IP –∞–¥—Ä–µ—Å:");
                    ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                        ui.label(adapter.ip_addresses.join(", "));
                    });
                });

                ui.horizontal(|ui| {
                    ui.label("üîß DNS —Å–µ—Ä–≤–µ—Ä—ã:");
                    ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                        ui.label(adapter.dns_servers.join(", "));
                    });
                });

                ui.add_space(5.0);
                ui.separator();
            }
        }

        ui.add_space(20.0);
        ui.label("üí° –≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        ui.label("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
    }

    pub fn show_stats_tab(app: &mut DNSManager, ui: &mut Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞");
        });
        ui.separator();

        ui.label("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:");
        ui.add_space(10.0);

        ui.horizontal(|ui| {
            ui.label("üéØ –í–µ—Ä—Å–∏—è:");
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label("v1.2.1 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–µ—Ç–∏");
            });
        });

        ui.horizontal(|ui| {
            ui.label("üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ DNS:");
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label("6 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö");
            });
        });

        ui.horizontal(|ui| {
            ui.label("‚ö° –¢–µ—Å—Ç–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏:");
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label(if app.speed_results.is_empty() { "–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å" } else { "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" });
            });
        });

        ui.add_space(20.0);
        ui.label("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DNS:");
        ui.add_space(10.0);

        ui.label("‚òÅÔ∏è **Cloudflare (1.1.1.1)**: –ë—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π DNS –æ—Ç Cloudflare");
        ui.label("üîç **Google (8.8.8.8)**: –ù–∞–¥–µ–∂–Ω—ã–π DNS –æ—Ç Google");
        ui.label("üîí **Quad9 (9.9.9.9)**: –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤");
        ui.label("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **OpenDNS (208.67.222.222)**: –°–µ–º–µ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
        ui.label("üö´ **AdGuard (94.140.14.14)**: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã");
        ui.label("üßπ **CleanBrowsing (185.228.168.9)**: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –¥–µ—Ç–µ–π");

        ui.add_space(20.0);
        ui.label("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:");
        ui.add_space(10.0);

        ui.hyperlink_to("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞", "https://github.com/winterice2/dns-manager");
        ui.hyperlink_to("üåê Cloudflare DNS", "https://1.1.1.1/");
        ui.hyperlink_to("üîç Google Public DNS", "https://dns.google/");
        ui.hyperlink_to("üîí Quad9", "https://www.quad9.net/");
    }
