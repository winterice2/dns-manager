// –ú–æ–¥—É–ª–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
mod ui;
mod network;
mod dns;
mod tray;
mod notifications;
mod settings;
mod auto_startup;

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([550.0, 650.0])
            .with_min_inner_size([450.0, 500.0])
            .with_title("DNS Manager - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í—Å–µ–ª–µ–Ω–Ω–∞—è"),
        ..Default::default()
    };

    eframe::run_native(
        "DNS Manager",
        options,
        Box::new(|cc| Box::new(DNSManager::new(cc))),
    )
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ –º–æ–¥—É–ª–µ–π
use dns::providers::{DNSProvider, SpeedTestResult};
use network::adapters::NetworkAdapter;
use std::time::{Duration, Instant};

#[derive(Clone)]
struct DNSSchedule {
    primary: String,
    secondary: String,
    name: String,
}

#[derive(Clone)]
struct HistoryEntry {
    timestamp: String,
    action: String,
    dns_before: String,
    dns_after: String,
}

#[derive(Clone)]
struct CommandResult {
    timestamp: String,
    command: String,
    success: bool,
    result: String,
    error_message: Option<String>,
}

#[derive(Default)]
struct DNSManager {
    status: String,
    current_dns: String,
    speed_results: Vec<SpeedTestResult>,
    custom_primary: String,
    custom_secondary: String,
    selected_tab: usize,
    is_speed_testing: bool,
    network_adapters: Vec<NetworkAdapter>,
    speed_test_frame_counter: u32, // –°—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    custom_dns_name: String, // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ DNS —Å–µ—Ä–≤–µ—Ä–∞
    custom_dns_description: String, // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ DNS —Å–µ—Ä–≤–µ—Ä–∞

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS
    scheduler_enabled: bool,
    scheduler_interval: u32, // –≤ –º–∏–Ω—É—Ç–∞—Ö
    scheduler_dns_list: Vec<DNSSchedule>,
    scheduler_current_index: usize,
    scheduler_last_switch: Option<Instant>,

    // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    history: Vec<HistoryEntry>,

    // –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    theme_dark: bool,
    theme_custom_colors: bool,
    theme_primary: [u8; 3],
    theme_secondary: [u8; 3],
    theme_accent: [u8; 3],

    // –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
    tray_enabled: bool,
    tray_manager: Option<tray::TrayManager>,
    window_visible: bool,
    is_background_mode: bool,

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_manager: notifications::NotificationManager,
    silent_mode: bool,

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    hotkeys_enabled: bool,

    // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
    auto_startup_enabled: bool,

    // –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    scheduler_new_name: String,
    scheduler_new_primary: String,
    scheduler_new_secondary: String,

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
    command_results: Vec<CommandResult>,
}

impl DNSManager {
    fn new(cc: &eframe::CreationContext<'_>) -> Self {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let saved_settings = settings::AppSettings::load();

        // üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê 2025 - –ü—É—Ç—å –ê–Ω–¥—Ä–æ–º–µ–¥—ã üåå
        let mut style = (*cc.egui_ctx.style()).clone();
        style.visuals.dark_mode = true; // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–æ—Å–º–æ—Å–∞

        // üåå –ì–ª—É–±–æ–∫–∏–π –∫–æ—Å–º–æ—Å - —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        style.visuals.window_fill = egui::Color32::from_rgb(15, 23, 42); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –∫–æ—Å–º–æ—Å
        style.visuals.panel_fill = egui::Color32::from_rgb(30, 41, 59); // –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Å–∏–Ω–∏–π
        style.visuals.faint_bg_color = egui::Color32::from_rgb(51, 65, 85);

        // üõ∞Ô∏è –ö–∏–±–µ—Ä-–ø–∞–Ω–∫ –∫–Ω–æ–ø–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å –±–∏—Ä—é–∑–æ–≤—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
        style.visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(147, 51, 234); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (Claude-style)
        style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(59, 130, 246); // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π

        // üîÆ –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è - –∫–∞–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏
        style.visuals.widgets.inactive.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.hovered.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.active.rounding = egui::Rounding::same(16.0);

        // ‚ö° –ù–µ–æ–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –∫–∏–±–µ—Ä-–ø–∞–Ω–∫ —Å—Ç–∏–ª—å
        style.visuals.widgets.inactive.fg_stroke.color = egui::Color32::from_rgb(236, 254, 255); // –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
        style.visuals.widgets.hovered.fg_stroke.color = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π
        style.visuals.widgets.active.fg_stroke.color = egui::Color32::WHITE;

        // üåü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤
        style.visuals.override_text_color = Some(egui::Color32::from_rgb(148, 163, 184)); // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π

        cc.egui_ctx.set_style(style);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        let network_adapters = network::adapters::get_network_adapters();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ DNS
        let scheduler_dns_list = vec![
            DNSSchedule {
                primary: "1.1.1.1".to_string(),
                secondary: "1.0.0.1".to_string(),
                name: "Cloudflare".to_string(),
            },
            DNSSchedule {
                primary: "8.8.8.8".to_string(),
                secondary: "8.8.4.4".to_string(),
                name: "Google".to_string(),
            },
            DNSSchedule {
                primary: "9.9.9.9".to_string(),
                secondary: "149.112.112.112".to_string(),
                name: "Quad9".to_string(),
            },
        ];

        Self {
            status: "üöÄ Ready for space launch!".to_string(),
            current_dns: String::new(),
            speed_results: Vec::new(),
            custom_primary: String::new(),
            custom_secondary: String::new(),
            selected_tab: 0,
            is_speed_testing: false,
            network_adapters,
            speed_test_frame_counter: 0,
            custom_dns_name: String::new(),
            custom_dns_description: String::new(),

            // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS
            scheduler_enabled: saved_settings.scheduler_enabled,
            scheduler_interval: saved_settings.scheduler_interval,
            scheduler_dns_list,
            scheduler_current_index: 0,
            scheduler_last_switch: None,

            // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            history: Vec::new(),

            // –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            theme_dark: saved_settings.theme_dark,
            theme_custom_colors: saved_settings.theme_custom_colors,
            theme_primary: saved_settings.theme_primary,
            theme_secondary: saved_settings.theme_secondary,
            theme_accent: saved_settings.theme_accent,

            // –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
            tray_enabled: saved_settings.tray_enabled,
            tray_manager: None,
            window_visible: saved_settings.window_visible,
            is_background_mode: false,

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_manager: {
                let mut nm = notifications::NotificationManager::new();
                nm.set_silent_mode(saved_settings.silent_mode);
                nm
            },
            silent_mode: saved_settings.silent_mode,

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        hotkeys_enabled: saved_settings.hotkeys_enabled,

        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        auto_startup_enabled: auto_startup::AutoStartupManager::is_enabled(),

        // –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        scheduler_new_name: "–ú–æ–π DNS".to_string(),
        scheduler_new_primary: String::new(),
        scheduler_new_secondary: String::new(),

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
        command_results: Vec::new(),

        }
    }



    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
    fn get_current_dns() -> Result<String, String> {
        dns::providers::get_current_dns()
    }

    fn set_dns(&mut self, primary: &str, secondary: &str) -> Result<String, String> {
        let dns_before = dns::providers::get_current_dns().unwrap_or_else(|_| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string());
        let result = dns::providers::set_dns(primary, secondary);

        if let Ok(ref _success_msg) = result {
            let dns_after = format!("{}, {}", primary, secondary);
            self.log_history("–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ DNS", &dns_before, &dns_after);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ)
            let _ = self.notification_manager.send_dns_change_notification("DNS", primary, secondary);
        }

        result
    }

    fn reset_dns(&mut self) -> Result<String, String> {
        let dns_before = dns::providers::get_current_dns().unwrap_or_else(|_| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string());
        let result = dns::providers::reset_dns();

        if let Ok(ref _success_msg) = result {
            let dns_after = "DHCP (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)".to_string();
            self.log_history("–°–±—Ä–æ—Å –Ω–∞ DHCP", &dns_before, &dns_after);
        }

        result
    }

    fn ping_dns_server(ip: &str) -> Option<f64> {
        dns::providers::ping_dns_server(ip)
    }

    fn get_dns_providers() -> Vec<DNSProvider> {
        dns::providers::get_dns_providers()
    }

    fn get_network_adapters() -> Vec<NetworkAdapter> {
        network::adapters::get_network_adapters()
    }

    fn start_speed_test(&mut self) {
        if !self.is_speed_testing {
            self.is_speed_testing = true;
            self.status = "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ DNS...".to_string();
            self.speed_results.clear();
        }
    }

    fn update_speed_test(&mut self) -> bool {
        if !self.is_speed_testing {
            return false;
        }

        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        let frame_divisor = if self.is_background_mode { 40 } else { 10 };

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        self.speed_test_frame_counter += 1;
        if self.speed_test_frame_counter % frame_divisor != 0 {
            return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫–∞–¥—Ä
        }

        let providers = dns::providers::get_dns_providers();
        let current_count = self.speed_results.len();

        if current_count < providers.len() {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            let provider = &providers[current_count];
            self.status = format!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {}... ({}/{})", provider.name, current_count + 1, providers.len());

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            let primary_ping = dns::providers::ping_dns_server(&provider.primary);
            let secondary_ping = dns::providers::ping_dns_server(&provider.secondary);

            let mut result = dns::providers::SpeedTestResult {
                provider: provider.name.clone(),
                primary_ping,
                secondary_ping,
                avg_ping: None,
            };

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            let mut pings = Vec::new();
            if let Some(p) = result.primary_ping { pings.push(p); }
            if let Some(p) = result.secondary_ping { pings.push(p); }

            if !pings.is_empty() {
                result.avg_ping = Some(pings.iter().sum::<f64>() / pings.len() as f64);
            }

            self.speed_results.push(result);
            return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        } else {
            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            self.is_speed_testing = false;
            self.speed_test_frame_counter = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–µ
            self.speed_results.sort_by(|a, b| {
                match (a.avg_ping, b.avg_ping) {
                    (Some(a_ping), Some(b_ping)) => a_ping.partial_cmp(&b_ping).unwrap_or(std::cmp::Ordering::Equal),
                    (Some(_), None) => std::cmp::Ordering::Less,
                    (None, Some(_)) => std::cmp::Ordering::Greater,
                    (None, None) => std::cmp::Ordering::Equal,
                }
            });

            self.status = format!("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", self.speed_results.len());
            return true; // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        }
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS
    fn check_scheduler(&mut self) {
        if !self.scheduler_enabled || self.scheduler_dns_list.is_empty() {
            return;
        }

        let now = Instant::now();
        let should_switch = match self.scheduler_last_switch {
            Some(last) => now.duration_since(last) >= Duration::from_secs(self.scheduler_interval as u64 * 60),
            None => true, // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        };

        if should_switch {
            self.switch_to_next_scheduled_dns();
            self.scheduler_last_switch = Some(now);
        }
    }

    fn switch_to_next_scheduled_dns(&mut self) {
        if self.scheduler_dns_list.is_empty() {
            return;
        }

        let dns_before = dns::providers::get_current_dns().unwrap_or_else(|_| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string());

        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º mutable –º–µ—Ç–æ–¥–∞
        let primary = self.scheduler_dns_list[self.scheduler_current_index].primary.clone();
        let secondary = self.scheduler_dns_list[self.scheduler_current_index].secondary.clone();
        let name = self.scheduler_dns_list[self.scheduler_current_index].name.clone();

        let result = self.set_dns(&primary, &secondary);

        match result {
            Ok(_) => {
                let dns_after = format!("{} ({}, {})", name, primary, secondary);
                self.status = format!("üïí –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {}", dns_after);
                self.log_history("–ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", &dns_before, &dns_after);

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                let _ = self.notification_manager.send_scheduler_notification(&name);
            }
            Err(e) => {
                self.status = format!("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {}", e);
            }
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É DNS –≤ —Å–ø–∏—Å–∫–µ
        self.scheduler_current_index = (self.scheduler_current_index + 1) % self.scheduler_dns_list.len();
    }

    // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    fn log_history(&mut self, action: &str, dns_before: &str, dns_after: &str) {
        use std::time::{SystemTime, UNIX_EPOCH};

        let timestamp = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs();

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        let datetime = chrono::DateTime::from_timestamp(timestamp as i64, 0)
            .unwrap_or_else(|| chrono::DateTime::UNIX_EPOCH);

        let formatted_time = datetime.format("%Y-%m-%d %H:%M:%S").to_string();

        let entry = HistoryEntry {
            timestamp: formatted_time,
            action: action.to_string(),
            dns_before: dns_before.to_string(),
            dns_after: dns_after.to_string(),
        };

        self.history.push(entry);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if self.history.len() > 100 {
            self.history.remove(0);
        }
    }

    // –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    fn apply_theme(&self, ctx: &egui::Context) {
        let mut style = (*ctx.style()).clone();

        style.visuals.dark_mode = self.theme_dark;

        if self.theme_custom_colors {
            style.visuals.window_fill = egui::Color32::from_rgb(
                self.theme_primary[0],
                self.theme_primary[1],
                self.theme_primary[2]
            );
            style.visuals.panel_fill = egui::Color32::from_rgb(
                self.theme_secondary[0],
                self.theme_secondary[1],
                self.theme_secondary[2]
            );
            style.visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(
                self.theme_primary[0],
                self.theme_primary[1],
                self.theme_primary[2]
            );
            style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(
                self.theme_secondary[0],
                self.theme_secondary[1],
                self.theme_secondary[2]
            );
            style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(
                self.theme_accent[0],
                self.theme_accent[1],
                self.theme_accent[2]
            );
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞
            style.visuals.window_fill = egui::Color32::from_rgb(15, 23, 42);
            style.visuals.panel_fill = egui::Color32::from_rgb(30, 41, 59);
            style.visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(147, 51, 234);
            style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(59, 130, 246);
            style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(6, 182, 212);
        }

        ctx.set_style(style);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    fn save_settings(&self) {
        let settings = settings::AppSettings {
            tray_enabled: self.tray_enabled,
            window_visible: self.window_visible,
            silent_mode: self.silent_mode,
            scheduler_enabled: self.scheduler_enabled,
            scheduler_interval: self.scheduler_interval,
            theme_dark: self.theme_dark,
            theme_custom_colors: self.theme_custom_colors,
            theme_primary: self.theme_primary,
            theme_secondary: self.theme_secondary,
            theme_accent: self.theme_accent,
            hotkeys_enabled: self.hotkeys_enabled,
            auto_startup_enabled: self.auto_startup_enabled,
        };

        if let Err(e) = settings.save() {
            eprintln!("Failed to save settings: {}", e);
        }
    }

}

impl eframe::App for DNSManager {
    fn update(&mut self, ctx: &egui::Context, frame: &mut eframe::Frame) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        self.apply_theme(ctx);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tray manager –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.tray_enabled && self.tray_manager.is_none() {
            match tray::TrayManager::new() {
                Ok(tray) => {
                    self.tray_manager = Some(tray);
                    self.status = "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω".to_string();
                }
                Err(e) => {
                    self.status = format!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—è: {}", e);
                    self.tray_enabled = false;
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ—è
        if let Some(ref tray_manager) = self.tray_manager {
            for event in tray_manager.poll_events() {
                match event {
                    tray::TrayEvent::Show => {
                        self.window_visible = true;
                        ctx.send_viewport_cmd(egui::ViewportCommand::Visible(true));
                        self.is_background_mode = false;
                    }
                    tray::TrayEvent::Hide => {
                        self.window_visible = false;
                        ctx.send_viewport_cmd(egui::ViewportCommand::Visible(false));
                        self.is_background_mode = true;
                    }
                    tray::TrayEvent::Quit => {
                        ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                    }
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS
        self.check_scheduler();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        if self.hotkeys_enabled {
            self.handle_hotkeys(ctx);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
        if self.is_speed_testing {
            self.update_speed_test();
            ctx.request_repaint(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        }

        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.is_background_mode {
            // –í —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º—Å—è —Ä–µ–∂–µ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
            ctx.request_repaint_after(std::time::Duration::from_secs(2));
        } else {
            // –í –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ - –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
            ctx.request_repaint_after(std::time::Duration::from_millis(500));
        }

        egui::CentralPanel::default().show(ctx, |ui| {
            // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            ui.horizontal(|ui| {
                ui.heading("üåå DNS Manager - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í—Å–µ–ª–µ–Ω–Ω–∞—è");
            });
            ui.separator();

            // –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            ui.horizontal_wrapped(|ui| {
                ui.spacing_mut().item_spacing.x = 2.0; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏

                if ui.selectable_label(self.selected_tab == 0, "üåå –ì–ª–∞–≤–Ω–∞—è").clicked() {
                    self.selected_tab = 0;
                }
                if ui.selectable_label(self.selected_tab == 1, "üåç –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã").clicked() {
                    self.selected_tab = 1;
                }
                if ui.selectable_label(self.selected_tab == 2, "üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ").clicked() {
                    self.selected_tab = 2;
                }
                if ui.selectable_label(self.selected_tab == 3, "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è").clicked() {
                    self.selected_tab = 3;
                }
                if ui.selectable_label(self.selected_tab == 4, "üì° –°–µ—Ç—å").clicked() {
                    self.selected_tab = 4;
                }
                if ui.selectable_label(self.selected_tab == 5, "üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫").clicked() {
                    self.selected_tab = 5;
                }
                if ui.selectable_label(self.selected_tab == 6, "üìÖ –ò—Å—Ç–æ—Ä–∏—è").clicked() {
                    self.selected_tab = 6;
                }
                if ui.selectable_label(self.selected_tab == 7, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").clicked() {
                    self.selected_tab = 7;
                }
                if ui.selectable_label(self.selected_tab == 8, "üé® –¢–µ–º—ã").clicked() {
                    self.selected_tab = 8;
                }
                if ui.selectable_label(self.selected_tab == 9, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").clicked() {
                    self.selected_tab = 9;
                }
                if ui.selectable_label(self.selected_tab == 10, "üèì –ú–æ–Ω–∏—Ç–æ—Ä").clicked() {
                    self.selected_tab = 10;
                }
            });

            ui.separator();

            match self.selected_tab {
                0 => self.show_main_tab(ui, ctx),
                1 => self.show_providers_tab(ui, ctx),
                2 => self.show_custom_tab(ui, ctx),
                3 => self.show_lab_tab(ui, ctx),
                4 => self.show_network_tab(ui),
                5 => self.show_scheduler_tab(ui),
                6 => self.show_history_tab(ui),
                7 => self.show_settings_tab(ui),
                8 => self.show_themes_tab(ui),
                9 => self.show_stats_tab(ui),
                10 => self.show_monitor_tab(ui),
                _ => self.show_main_tab(ui, ctx),
            }
        });
    }
}

impl DNSManager {
    // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –º–æ–¥—É–ª–µ–π UI
    fn show_main_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_main_tab(self, ui, ctx);
    }

    fn show_providers_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_providers_tab(self, ui, ctx);
    }

    fn show_lab_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_lab_tab(self, ui, ctx);
    }

    fn show_network_tab(&mut self, ui: &mut egui::Ui) {
        ui::tabs::show_network_tab(self, ui);
    }

    fn show_stats_tab(&mut self, ui: &mut egui::Ui) {
        ui::tabs::show_stats_tab(self, ui);
    }

    fn show_scheduler_tab(&mut self, ui: &mut egui::Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS");
        });
        ui.separator();

        ui.label("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É DNS —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
        ui.add_space(15.0);

        // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        ui.horizontal(|ui| {
            ui.label("üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:");
            if ui.checkbox(&mut self.scheduler_enabled, "").changed() {
                if self.scheduler_enabled {
                    self.status = "üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS –≤–∫–ª—é—á–µ–Ω".to_string();
                } else {
                    self.status = "‚è∏Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DNS –æ—Ç–∫–ª—é—á–µ–Ω".to_string();
                }
            }
        });

        ui.add_space(10.0);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        ui.horizontal(|ui| {
            ui.label("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã):");
            let mut interval = self.scheduler_interval as i32;
            if ui.add(egui::DragValue::new(&mut interval).clamp_range(5..=1440)).changed() {
                self.scheduler_interval = interval as u32;
            }
        });

        ui.add_space(20.0);

        // –°–ø–∏—Å–æ–∫ DNS –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        ui.label("üîÑ DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏:");
        ui.add_space(10.0);

        let mut to_remove = None;
        for (i, schedule) in self.scheduler_dns_list.iter().enumerate() {
            ui.horizontal(|ui| {
                ui.label(format!("{}. {}: {}, {}", i + 1, schedule.name, schedule.primary, schedule.secondary));

                if ui.small_button("üóëÔ∏è").on_hover_text("–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞").clicked() {
                    to_remove = Some(i);
                }
            });
        }

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if let Some(index) = to_remove {
            if index < self.scheduler_dns_list.len() {
                self.scheduler_dns_list.remove(index);
            }
        }

        ui.add_space(15.0);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DNS –≤ —Å–ø–∏—Å–æ–∫
        ui.label("‚ûï –î–æ–±–∞–≤–∏—Ç—å DNS –≤ —Ä–æ—Ç–∞—Ü–∏—é:");
        ui.add_space(5.0);

        ui.horizontal(|ui| {
            ui.label("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:");
            ui.text_edit_singleline(&mut self.scheduler_new_name);
        });

        ui.horizontal(|ui| {
            ui.label("üîµ Primary:");
            ui.text_edit_singleline(&mut self.scheduler_new_primary);
        });

        ui.horizontal(|ui| {
            ui.label("üîµ Secondary:");
            ui.text_edit_singleline(&mut self.scheduler_new_secondary);
        });

        ui.add_space(10.0);

        let can_add = !self.scheduler_new_name.is_empty() &&
                      dns::providers::validate_ip_address(&self.scheduler_new_primary) &&
                      (self.scheduler_new_secondary.is_empty() || dns::providers::validate_ip_address(&self.scheduler_new_secondary));

        if ui.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫").clicked() && can_add {
            self.scheduler_dns_list.push(DNSSchedule {
                name: self.scheduler_new_name.clone(),
                primary: self.scheduler_new_primary.clone(),
                secondary: self.scheduler_new_secondary.clone(),
            });

            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            self.scheduler_new_name = "–ú–æ–π DNS".to_string();
            self.scheduler_new_primary.clear();
            self.scheduler_new_secondary.clear();

            self.status = "‚úÖ DNS –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫".to_string();
        }

        ui.add_space(20.0);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        ui.label("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:");
        ui.add_space(5.0);

        ui.label(format!("üîÑ –°—Ç–∞—Ç—É—Å: {}", if self.scheduler_enabled { "–í–∫–ª—é—á–µ–Ω" } else { "–û—Ç–∫–ª—é—á–µ–Ω" }));
        ui.label(format!("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} –º–∏–Ω—É—Ç", self.scheduler_interval));
        ui.label(format!("üìã DNS –≤ —Å–ø–∏—Å–∫–µ: {}", self.scheduler_dns_list.len()));
        ui.label(format!("üéØ –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {}", self.scheduler_current_index + 1));

        if let Some(last_switch) = self.scheduler_last_switch {
            let elapsed = last_switch.elapsed().as_secs() / 60;
            ui.label(format!("üïê –ü—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {} –º–∏–Ω", elapsed));
        } else {
            ui.label("üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –Ω–∏–∫–æ–≥–¥–∞");
        }
    }

    fn show_history_tab(&mut self, ui: &mut egui::Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üìÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DNS");
        });
        ui.separator();

        ui.label("üìú –ñ—É—Ä–Ω–∞–ª –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏");
        ui.add_space(15.0);

        if ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é").clicked() {
            // –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        }

        ui.add_space(10.0);

        if self.history.is_empty() {
            ui.label("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è DNS –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å.");
        } else {
            ui.label(format!("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {}", self.history.len()));

            egui::ScrollArea::vertical().show(ui, |ui| {
                for (i, entry) in self.history.iter().enumerate().rev() { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ü–∞
                    ui.add_space(5.0);
                    ui.group(|ui| {
                        ui.horizontal(|ui| {
                            ui.label(format!("üïê {}", entry.timestamp));
                            ui.with_layout(egui::Layout::right_to_left(egui::Align::TOP), |ui| {
                                ui.small(format!("#{}", self.history.len() - i));
                            });
                        });

                        ui.label(format!("üéØ {}", entry.action));
                        ui.add_space(2.0);

                        ui.horizontal(|ui| {
                            ui.colored_label(egui::Color32::RED, "‚ùå –î–æ:");
                            ui.label(&entry.dns_before);
                        });

                        ui.horizontal(|ui| {
                            ui.colored_label(egui::Color32::GREEN, "‚úÖ –ü–æ—Å–ª–µ:");
                            ui.label(&entry.dns_after);
                        });
                    });
                }
            });
        }

        ui.add_space(20.0);

        // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if ui.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é").clicked() {
            self.history.clear();
            self.status = "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞".to_string();
        }

        ui.add_space(5.0);
        ui.small("üí° –ò—Å—Ç–æ—Ä–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 100 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏");
    }

    fn show_settings_tab(&mut self, ui: &mut egui::Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        });
        ui.separator();

        ui.label("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã DNS Manager");
        ui.add_space(15.0);

        // –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ui.label("üíæ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫:");
        ui.add_space(5.0);

        ui.horizontal(|ui| {
            if ui.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏").clicked() {
                self.save_settings();
                self.status = "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ~/.dns-manager/settings.json".to_string();
            }

            if ui.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫").clicked() {
                #[cfg(target_os = "windows")]
                {
                    let home = dirs::home_dir().unwrap_or_else(|| std::path::PathBuf::from("."));
                    let path = home.join(".dns-manager");
                    let _ = std::process::Command::new("explorer").arg(path).spawn();
                }
                self.status = "üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫".to_string();
            }
        });

        ui.add_space(20.0);

        // –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        ui.label("üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π:");
        ui.add_space(5.0);

        ui.horizontal(|ui| {
            ui.label("üîî –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π:");
            ui.checkbox(&mut self.tray_enabled, "");
            ui.small(if self.tray_enabled { "‚úÖ –í–∫–ª—é—á–µ–Ω" } else { "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω" });
        });

        if self.tray_enabled {
            ui.add_space(5.0);
            ui.small("üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ");
            ui.small("   ‚Ä¢ –ú–µ–Ω—é '–ü–æ–∫–∞–∑–∞—Ç—å': –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ");
            ui.small("   ‚Ä¢ –ú–µ–Ω—é '–°–∫—Ä—ã—Ç—å': —Å–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π");
            ui.small("   ‚Ä¢ –ú–µ–Ω—é '–í—ã—Ö–æ–¥': –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");

            ui.add_space(10.0);

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ç—Ä–µ–π
            if ui.button("üì• –°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π").clicked() {
                self.window_visible = false;
                self.is_background_mode = true;
                self.status = "üì• –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π".to_string();
            }
        }

        ui.add_space(10.0);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        ui.horizontal(|ui| {
            ui.label("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:");
            if ui.checkbox(&mut self.silent_mode, "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º").changed() {
                self.notification_manager.set_silent_mode(self.silent_mode);
                if self.silent_mode {
                    self.status = "üîï –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã".to_string();
                } else {
                    self.status = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã".to_string();
                }
            }
        });

        if !self.silent_mode {
            ui.add_space(5.0);
            ui.small("üí° –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏:");
            ui.small("   ‚Ä¢ –†—É—á–Ω–æ–π —Å–º–µ–Ω–µ DNS");
            ui.small("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞");
            ui.small("   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏");
        }

        ui.add_space(10.0);

        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        ui.horizontal(|ui| {
            ui.label("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:");
            if ui.checkbox(&mut self.auto_startup_enabled, "–ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Windows").changed() {
                if self.auto_startup_enabled {
                    match auto_startup::AutoStartupManager::enable() {
                        Ok(_) => self.status = "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω".to_string(),
                        Err(e) => {
                            self.status = format!("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {}", e);
                            self.auto_startup_enabled = false;
                        }
                    }
                } else {
                    match auto_startup::AutoStartupManager::disable() {
                        Ok(_) => self.status = "‚è∏Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω".to_string(),
                        Err(e) => self.status = format!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {}", e),
                    }
                }
                self.save_settings();
            }
        });

        if self.auto_startup_enabled {
            ui.add_space(5.0);
            ui.small("üí° DNS Manager –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Windows");
            ui.small("   –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π");
        }

        ui.add_space(10.0);

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        ui.horizontal(|ui| {
            ui.label("‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:");
            if ui.checkbox(&mut self.hotkeys_enabled, "").changed() {
                if self.hotkeys_enabled {
                    self.status = "‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤–∫–ª—é—á–µ–Ω—ã".to_string();
                } else {
                    self.status = "üö´ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã".to_string();
                }
            }
        });

        ui.add_space(20.0);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        ui.label("‚å®Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:");
        ui.add_space(5.0);

        ui.small("‚Ä¢ Ctrl+1: Cloudflare DNS (1.1.1.1)");
        ui.small("‚Ä¢ Ctrl+2: Google DNS (8.8.8.8)");
        ui.small("‚Ä¢ Ctrl+3: Quad9 DNS (9.9.9.9)");
        ui.small("‚Ä¢ Ctrl+4: OpenDNS (208.67.222.222)");
        ui.small("‚Ä¢ Ctrl+5: AdGuard DNS (94.140.14.14)");
        ui.small("‚Ä¢ Ctrl+6: CleanBrowsing (185.228.168.9)");
        ui.small("‚Ä¢ Ctrl+0: –°–±—Ä–æ—Å –Ω–∞ DHCP");
        ui.small("‚Ä¢ F5: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å DNS");

        ui.add_space(20.0);

        // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ui.label("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫:");
        ui.add_space(5.0);

        ui.horizontal(|ui| {
            if ui.button("‚ö†Ô∏è –°–±—Ä–æ—Å –∫ defaults").clicked() {
                self.reset_to_defaults();
                self.status = "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é".to_string();
            }
        });

        ui.add_space(5.0);
        ui.small("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!");
    }

    fn show_themes_tab(&mut self, ui: &mut egui::Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üé® –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
        });
        ui.separator();

        ui.label("üñåÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ DNS Manager");
        ui.add_space(15.0);

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        ui.horizontal(|ui| {
            ui.label("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞:");
            if ui.checkbox(&mut self.theme_dark, "").changed() {
                self.status = format!("üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {}", if self.theme_dark { "—Ç–µ–º–Ω—É—é" } else { "—Å–≤–µ—Ç–ª—É—é" });
            }
        });

        ui.add_space(15.0);

        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        ui.label("üé≠ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:");
        ui.add_space(10.0);

        ui.horizontal(|ui| {
            if ui.button("üåå –ö–æ—Å–º–æ—Å").clicked() {
                self.apply_preset_theme("cosmos");
                self.status = "üåå –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞".to_string();
            }

            if ui.button("üîÆ –ö–∏–±–µ—Ä–ø–∞–Ω–∫").clicked() {
                self.apply_preset_theme("cyberpunk");
                self.status = "üîÆ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–∏–±–µ—Ä-–ø–∞–Ω–∫ —Ç–µ–º–∞".to_string();
            }

            if ui.button("üå∏ –†–æ–∑–æ–≤–∞—è").clicked() {
                self.apply_preset_theme("pink");
                self.status = "üå∏ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–æ–∑–æ–≤–∞—è —Ç–µ–º–∞".to_string();
            }

            if ui.button("üåä –û–∫–µ–∞–Ω").clicked() {
                self.apply_preset_theme("ocean");
                self.status = "üåä –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –æ–∫–µ–∞–Ω–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞".to_string();
            }
        });

        ui.add_space(20.0);

        // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
        ui.horizontal(|ui| {
            ui.label("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞:");
            if ui.checkbox(&mut self.theme_custom_colors, "").changed() {
                self.status = format!("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ {}", if self.theme_custom_colors { "–≤–∫–ª—é—á–µ–Ω—ã" } else { "–æ—Ç–∫–ª—é—á–µ–Ω—ã" });
            }
        });

        if self.theme_custom_colors {
            ui.add_space(15.0);
            ui.label("üñçÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤:");

            // Primary color
            ui.horizontal(|ui| {
                ui.label("üéØ Primary:");
                ui.color_edit_button_srgb(&mut self.theme_primary);
                ui.label(format!("RGB({}, {}, {})", self.theme_primary[0], self.theme_primary[1], self.theme_primary[2]));
            });

            // Secondary color
            ui.horizontal(|ui| {
                ui.label("üé™ Secondary:");
                ui.color_edit_button_srgb(&mut self.theme_secondary);
                ui.label(format!("RGB({}, {}, {})", self.theme_secondary[0], self.theme_secondary[1], self.theme_secondary[2]));
            });

            // Accent color
            ui.horizontal(|ui| {
                ui.label("‚ö° Accent:");
                ui.color_edit_button_srgb(&mut self.theme_accent);
                ui.label(format!("RGB({}, {}, {})", self.theme_accent[0], self.theme_accent[1], self.theme_accent[2]));
            });
        }

        ui.add_space(20.0);

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        ui.label("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:");
        ui.add_space(10.0);

        ui.group(|ui| {
            ui.label("üéõÔ∏è –ö–Ω–æ–ø–∫–∞:");
            let _ = ui.button("–ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏");

            ui.add_space(5.0);
            ui.label("üìù –¢–µ–∫—Å—Ç:");
            ui.label("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º—ã.");

            ui.add_space(5.0);
            ui.label("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:");
            let _ = ui.add(egui::ProgressBar::new(0.7).text("70%"));
        });
    }

    fn apply_preset_theme(&mut self, theme: &str) {
        self.theme_custom_colors = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞

        match theme {
            "cosmos" => {
                self.theme_dark = true;
                // –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            "cyberpunk" => {
                self.theme_dark = true;
                self.theme_custom_colors = true;
                self.theme_primary = [255, 0, 255]; // –ú–∞–≥–µ–Ω—Ç–∞
                self.theme_secondary = [0, 255, 255]; // –¶–∏–∞–Ω
                self.theme_accent = [255, 255, 0]; // –ñ–µ–ª—Ç—ã–π
            }
            "pink" => {
                self.theme_dark = false;
                self.theme_custom_colors = true;
                self.theme_primary = [255, 192, 203]; // –†–æ–∑–æ–≤—ã–π
                self.theme_secondary = [255, 218, 221]; // –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
                self.theme_accent = [255, 105, 180]; // –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
            }
            "ocean" => {
                self.theme_dark = true;
                self.theme_custom_colors = true;
                self.theme_primary = [0, 191, 255]; // –ì–ª—É–±–æ–∫–∏–π –Ω–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
                self.theme_secondary = [70, 130, 180]; // –°—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
                self.theme_accent = [0, 255, 255]; // –ê–∫–≤–∞
            }
            _ => {}
        }
    }

    fn reset_to_defaults(&mut self) {
        self.scheduler_enabled = false;
        self.scheduler_interval = 60;
        self.scheduler_current_index = 0;
        self.scheduler_last_switch = None;

        self.theme_dark = true;
        self.theme_custom_colors = false;
        self.theme_primary = [147, 51, 234];
        self.theme_secondary = [59, 130, 246];
        self.theme_accent = [6, 182, 212];

        self.tray_enabled = false;
        self.hotkeys_enabled = true;

        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º
        // self.history.clear();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    fn handle_hotkeys(&mut self, ctx: &egui::Context) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        ctx.input(|input| {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ Ctrl + —Ü–∏—Ñ—Ä—ã
            if input.modifiers.ctrl {
                // Ctrl+1: Cloudflare DNS
                if input.key_pressed(egui::Key::Num1) {
                    match self.set_dns("1.1.1.1", "1.0.0.1") {
                        Ok(_) => self.status = "üéâ Cloudflare DNS activated (Ctrl+1)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+2: Google DNS
                else if input.key_pressed(egui::Key::Num2) {
                    match self.set_dns("8.8.8.8", "8.8.4.4") {
                        Ok(_) => self.status = "üéâ Google DNS activated (Ctrl+2)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+3: Quad9 DNS
                else if input.key_pressed(egui::Key::Num3) {
                    match self.set_dns("9.9.9.9", "149.112.112.112") {
                        Ok(_) => self.status = "üéâ Quad9 DNS activated (Ctrl+3)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+4: OpenDNS
                else if input.key_pressed(egui::Key::Num4) {
                    match self.set_dns("208.67.222.222", "208.67.220.220") {
                        Ok(_) => self.status = "üéâ OpenDNS activated (Ctrl+4)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+5: AdGuard DNS
                else if input.key_pressed(egui::Key::Num5) {
                    match self.set_dns("94.140.14.14", "94.140.15.15") {
                        Ok(_) => self.status = "üéâ AdGuard DNS activated (Ctrl+5)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+6: CleanBrowsing
                else if input.key_pressed(egui::Key::Num6) {
                    match self.set_dns("185.228.168.9", "185.228.169.9") {
                        Ok(_) => self.status = "üéâ CleanBrowsing activated (Ctrl+6)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
                // Ctrl+0: –°–±—Ä–æ—Å –Ω–∞ DHCP
                else if input.key_pressed(egui::Key::Num0) {
                    match self.reset_dns() {
                        Ok(_) => self.status = "üîÑ DHCP reset activated (Ctrl+0)!".to_string(),
                        Err(e) => self.status = format!("‚ùå Hotkey failed: {}", e),
                    }
                    ctx.request_repaint();
                }
            }
            // F5: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            else if input.key_pressed(egui::Key::F5) {
                match dns::providers::get_current_dns() {
                    Ok(dns) => self.status = format!("üîÑ Status updated: {}", dns),
                    Err(e) => self.status = format!("‚ùå Status update failed: {}", e),
                }
                ctx.request_repaint();
            }
        });
    }

    fn show_custom_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui.vertical_centered(|ui| {
            ui.heading("üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã");
        });
        ui.separator();

        ui.label("‚≠ê –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π DNS –ø—Ä–æ—Ñ–∏–ª—å:");
        ui.add_space(15.0);

        // –ù–∞–∑–≤–∞–Ω–∏–µ DNS –ø—Ä–æ—Ñ–∏–ª—è
        ui.horizontal(|ui| {
            ui.label("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:");
            ui.text_edit_singleline(&mut self.custom_dns_name);
        });

        // –û–ø–∏—Å–∞–Ω–∏–µ
        ui.horizontal(|ui| {
            ui.label("üìù –û–ø–∏—Å–∞–Ω–∏–µ:");
            ui.text_edit_singleline(&mut self.custom_dns_description);
        });

                ui.add_space(10.0);

        // –ü–µ—Ä–≤–∏—á–Ω—ã–π DNS
        ui.horizontal(|ui| {
            ui.label("üîµ –ü–µ—Ä–≤–∏—á–Ω—ã–π DNS:");
            ui.text_edit_singleline(&mut self.custom_primary);
        });

        // –í—Ç–æ—Ä–∏—á–Ω—ã–π DNS
        ui.horizontal(|ui| {
            ui.label("üîµ –í—Ç–æ—Ä–∏—á–Ω—ã–π DNS:");
            ui.text_edit_singleline(&mut self.custom_secondary);
        });

                ui.add_space(20.0);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        let primary_valid = !self.custom_primary.is_empty() && dns::providers::validate_ip_address(&self.custom_primary);
        let secondary_valid = self.custom_secondary.is_empty() ||
                             dns::providers::validate_ip_address(&self.custom_secondary);

        let can_apply = primary_valid && secondary_valid && !self.custom_dns_name.is_empty();

        // –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if !self.custom_primary.is_empty() && !primary_valid {
            ui.colored_label(egui::Color32::RED, "‚ùå –ü–µ—Ä–≤–∏—á–Ω—ã–π DNS: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞");
        }
        if !self.custom_secondary.is_empty() && !secondary_valid {
            ui.colored_label(egui::Color32::RED, "‚ùå –í—Ç–æ—Ä–∏—á–Ω—ã–π DNS: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞");
        }

        ui.add_space(10.0);

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if ui.add_sized([ui.available_width(), 45.0],
            egui::Button::new("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π DNS")).clicked() && can_apply {

            // –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º mutable –º–µ—Ç–æ–¥–∞
            let primary = self.custom_primary.clone();
            let secondary = self.custom_secondary.clone();
            let name = self.custom_dns_name.clone();

            match self.set_dns(&primary, &secondary) {
                Ok(_) => {
                    self.status = format!("üéâ –ö–∞—Å—Ç–æ–º–Ω—ã–π DNS '{}' –ø—Ä–∏–º–µ–Ω–µ–Ω: {} {}",
                                         name,
                                         primary,
                                         if secondary.is_empty() { "".to_string() } else { format!(", {}", secondary) });
                }
                Err(e) => {
                    self.status = format!("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ DNS: {}", e);
                }
            }
            ctx.request_repaint();
        }

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        ui.add_space(20.0);
        ui.label("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:");
        ui.add_space(5.0);

        if !self.custom_dns_name.is_empty() {
            ui.label(format!("üè∑Ô∏è **{}**", self.custom_dns_name));
            if !self.custom_dns_description.is_empty() {
                ui.label(format!("üìù {}", self.custom_dns_description));
            }
            ui.label(format!("üîµ –ü–µ—Ä–≤–∏—á–Ω—ã–π: {}", self.custom_primary));
            if !self.custom_secondary.is_empty() {
                ui.label(format!("üîµ –í—Ç–æ—Ä–∏—á–Ω—ã–π: {}", self.custom_secondary));
            }
                } else {
            ui.label("üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞");
        }

        ui.add_space(20.0);
        ui.label("üí° IP –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: xxx.xxx.xxx.xxx (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)");
        ui.label("üí° –í—Ç–æ—Ä–∏—á–Ω—ã–π DNS –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º");
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä –ø–∏–Ω–≥–∞
    fn show_monitor_tab(&mut self, ui: &mut egui::Ui) {
        ui.vertical_centered(|ui| {
            ui.heading("üèì –ú–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏");
        });
        ui.separator();

        ui.label("üìä –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        ui.add_space(15.0);

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–≥–µ
        ui.label("üè† **–ü–∏–Ω–≥ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞:**");
        ui.add_space(10.0);

        // –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        let current_ping = self.measure_current_ping();

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∏–Ω–≥ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        let (ping_text, ping_color) = match current_ping {
            Some(p) if p < 30.0 => (format!("üü¢ {:.0}ms (–æ—Ç–ª–∏—á–Ω–æ)", p), egui::Color32::GREEN),
            Some(p) if p < 80.0 => (format!("üü° {:.0}ms (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)", p), egui::Color32::YELLOW),
            Some(p) => (format!("üî¥ {:.0}ms (–ø–ª–æ—Ö–æ)", p), egui::Color32::RED),
            None => ("‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".to_string(), egui::Color32::GRAY),
        };

        ui.colored_label(ping_color, ping_text);

        ui.add_space(20.0);

        // –õ–µ–≥–µ–Ω–¥–∞
        ui.label("üìã **–õ–µ–≥–µ–Ω–¥–∞:**");
        ui.add_space(5.0);
        ui.small("‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–π: < 30ms (–æ—Ç–ª–∏—á–Ω–æ)");
        ui.small("‚Ä¢ üü° –ñ–µ–ª—Ç—ã–π: 30-80ms (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)");
        ui.small("‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–π: > 80ms (–ø–ª–æ—Ö–æ)");
        ui.small("‚Ä¢ ‚ö™ –°–µ—Ä—ã–π: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö/–æ—à–∏–±–∫–∞");

        ui.add_space(15.0);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        ui.label("üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã");
        ui.add_space(10.0);

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å").clicked() {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            let _ = self.measure_current_ping();
        }

        ui.add_space(20.0);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ui.collapsing("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", |ui| {
            ui.label("üåê **–ß—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è:**");
            ui.small("‚Ä¢ –ü–∏–Ω–≥ –¥–æ —à–ª—é–∑–∞ (—Ä–æ—É—Ç–µ—Ä–∞) –≤–∞—à–µ–π —Å–µ—Ç–∏");
            ui.small("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä");
            ui.small("‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç");

            ui.add_space(10.0);

            ui.label("üí° **–î–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ:**");
            ui.small("‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
            ui.small("‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º");
            ui.small("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏");
            ui.small("‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º");
        });
    }

    fn measure_current_ping(&mut self) -> Option<f64> {
        // –ù–µ –∏–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        if self.is_background_mode {
            return None;
        }

        // –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
        for adapter in &self.network_adapters {
            if !adapter.gateway.is_empty() {
                let command = format!("ping {}", adapter.gateway);
                if let Some(ping) = dns::providers::ping_dns_server(&adapter.gateway) {
                    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.log_command_result(
                        &command,
                        true,
                        &format!("{:.1}ms", ping),
                        None
                    );
                    return Some(ping);
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
        self.log_command_result(
            "ping_gateway",
            false,
            "no_adapters",
            Some("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Å —à–ª—é–∑–æ–º")
        );

        None
    }

    fn check_app_status(&self) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        true // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    }

    fn log_command_result(&mut self, command: &str, success: bool, result: &str, error: Option<&str>) {
        use chrono::Local;

        let entry = CommandResult {
            timestamp: Local::now().format("%Y-%m-%d %H:%M:%S").to_string(),
            command: command.to_string(),
            success,
            result: result.to_string(),
            error_message: error.map(|e| e.to_string()),
        };

        self.command_results.push(entry);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        if self.command_results.len() > 50 {
            self.command_results.remove(0);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        #[cfg(debug_assertions)]
        {
            let status = if success { "‚úÖ SUCCESS" } else { "‚ùå FAILED" };
            println!("{} Command: {} | Result: {}", status, command, result);

            if let Some(err) = error {
                println!("   Error: {}", err);
            }
        }
    }

    fn get_last_command_status(&self) -> Option<&CommandResult> {
        self.command_results.last()
    }
}
