// –ú–æ–¥—É–ª–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
mod ui;
mod network;
mod dns;

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([400.0, 500.0])
            .with_title("DNS Manager - Windows"),
        ..Default::default()
    };

    eframe::run_native(
        "DNS Manager",
        options,
        Box::new(|cc| Box::new(DNSManager::new(cc))),
    )
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ –º–æ–¥—É–ª–µ–π
use dns::providers::{DNSProvider, SpeedTestResult};
use network::adapters::NetworkAdapter;

#[derive(Default)]
struct DNSManager {
    status: String,
    current_dns: String,
    speed_results: Vec<SpeedTestResult>,
    custom_primary: String,
    custom_secondary: String,
    selected_tab: usize,
    is_speed_testing: bool,
    network_adapters: Vec<NetworkAdapter>,
    speed_test_frame_counter: u32, // –°—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

impl DNSManager {
    fn new(cc: &eframe::CreationContext<'_>) -> Self {
        // üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê 2025 - –ü—É—Ç—å –ê–Ω–¥—Ä–æ–º–µ–¥—ã üåå
        let mut style = (*cc.egui_ctx.style()).clone();
        style.visuals.dark_mode = true; // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–æ—Å–º–æ—Å–∞

        // üåå –ì–ª—É–±–æ–∫–∏–π –∫–æ—Å–º–æ—Å - —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        style.visuals.window_fill = egui::Color32::from_rgb(15, 23, 42); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –∫–æ—Å–º–æ—Å
        style.visuals.panel_fill = egui::Color32::from_rgb(30, 41, 59); // –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Å–∏–Ω–∏–π
        style.visuals.faint_bg_color = egui::Color32::from_rgb(51, 65, 85);

        // üõ∞Ô∏è –ö–∏–±–µ—Ä-–ø–∞–Ω–∫ –∫–Ω–æ–ø–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å –±–∏—Ä—é–∑–æ–≤—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
        style.visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(147, 51, 234); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (Claude-style)
        style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(59, 130, 246); // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π

        // üîÆ –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è - –∫–∞–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏
        style.visuals.widgets.inactive.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.hovered.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.active.rounding = egui::Rounding::same(16.0);

        // ‚ö° –ù–µ–æ–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –∫–∏–±–µ—Ä-–ø–∞–Ω–∫ —Å—Ç–∏–ª—å
        style.visuals.widgets.inactive.fg_stroke.color = egui::Color32::from_rgb(236, 254, 255); // –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
        style.visuals.widgets.hovered.fg_stroke.color = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π
        style.visuals.widgets.active.fg_stroke.color = egui::Color32::WHITE;

        // üåü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤
        style.visuals.override_text_color = Some(egui::Color32::from_rgb(148, 163, 184)); // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π

        cc.egui_ctx.set_style(style);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        let network_adapters = network::adapters::get_network_adapters();

                Self {
                    status: "üöÄ Ready for space launch!".to_string(),
                    current_dns: String::new(),
                    speed_results: Vec::new(),
                    custom_primary: String::new(),
                    custom_secondary: String::new(),
                    selected_tab: 0,
                    is_speed_testing: false,
                    network_adapters,
                    speed_test_frame_counter: 0,
                }
    }



    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
    fn get_current_dns() -> Result<String, String> {
        dns::providers::get_current_dns()
    }

    fn set_dns(primary: &str, secondary: &str) -> Result<String, String> {
        dns::providers::set_dns(primary, secondary)
    }

    fn reset_dns() -> Result<String, String> {
        dns::providers::reset_dns()
    }

    fn ping_dns_server(ip: &str) -> Option<f64> {
        dns::providers::ping_dns_server(ip)
    }

    fn get_dns_providers() -> Vec<DNSProvider> {
        dns::providers::get_dns_providers()
    }

    fn get_network_adapters() -> Vec<NetworkAdapter> {
        network::adapters::get_network_adapters()
    }

    fn start_speed_test(&mut self) {
        if !self.is_speed_testing {
            self.is_speed_testing = true;
            self.status = "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ DNS...".to_string();
            self.speed_results.clear();
        }
    }

    fn update_speed_test(&mut self) -> bool {
        if !self.is_speed_testing {
            return false;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 10-–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        self.speed_test_frame_counter += 1;
        if self.speed_test_frame_counter % 10 != 0 {
            return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫–∞–¥—Ä
        }

        let providers = dns::providers::get_dns_providers();
        let current_count = self.speed_results.len();

        if current_count < providers.len() {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            let provider = &providers[current_count];
            self.status = format!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {}... ({}/{})", provider.name, current_count + 1, providers.len());

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 10-–π –∫–∞–¥—Ä)
            let primary_ping = dns::providers::ping_dns_server(&provider.primary);
            let secondary_ping = dns::providers::ping_dns_server(&provider.secondary);

            let mut result = dns::providers::SpeedTestResult {
                provider: provider.name.clone(),
                primary_ping,
                secondary_ping,
                avg_ping: None,
            };

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            let mut pings = Vec::new();
            if let Some(p) = result.primary_ping { pings.push(p); }
            if let Some(p) = result.secondary_ping { pings.push(p); }

            if !pings.is_empty() {
                result.avg_ping = Some(pings.iter().sum::<f64>() / pings.len() as f64);
            }

            self.speed_results.push(result);
            return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        } else {
            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            self.is_speed_testing = false;
            self.speed_test_frame_counter = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–µ
            self.speed_results.sort_by(|a, b| {
                match (a.avg_ping, b.avg_ping) {
                    (Some(a_ping), Some(b_ping)) => a_ping.partial_cmp(&b_ping).unwrap_or(std::cmp::Ordering::Equal),
                    (Some(_), None) => std::cmp::Ordering::Less,
                    (None, Some(_)) => std::cmp::Ordering::Greater,
                    (None, None) => std::cmp::Ordering::Equal,
                }
            });

            self.status = format!("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", self.speed_results.len());
            return true; // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        }
    }

}

impl eframe::App for DNSManager {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
        if self.is_speed_testing {
            self.update_speed_test();
            ctx.request_repaint(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        }

        egui::CentralPanel::default().show(ctx, |ui| {
            // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            ui.horizontal(|ui| {
                ui.heading("üåå DNS Manager - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í—Å–µ–ª–µ–Ω–Ω–∞—è");
            });
            ui.separator();

            // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            ui.horizontal(|ui| {
                if ui.selectable_label(self.selected_tab == 0, "üåå –ì–ª–∞–≤–Ω–∞—è").clicked() {
                    self.selected_tab = 0;
                }
                if ui.selectable_label(self.selected_tab == 1, "üåç –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã").clicked() {
                    self.selected_tab = 1;
                }
                if ui.selectable_label(self.selected_tab == 2, "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è").clicked() {
                    self.selected_tab = 2;
                }
                if ui.selectable_label(self.selected_tab == 3, "üì° –°–µ—Ç—å").clicked() {
                    self.selected_tab = 3;
                }
                if ui.selectable_label(self.selected_tab == 4, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").clicked() {
                    self.selected_tab = 4;
                }
            });

            ui.separator();

            match self.selected_tab {
                0 => self.show_main_tab(ui, ctx),
                1 => self.show_providers_tab(ui, ctx),
                2 => self.show_lab_tab(ui, ctx),
                3 => self.show_network_tab(ui),
                4 => self.show_stats_tab(ui),
                _ => self.show_main_tab(ui, ctx),
            }
        });
    }
}

impl DNSManager {
    // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –º–æ–¥—É–ª–µ–π UI
    fn show_main_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_main_tab(self, ui, ctx);
    }

    fn show_providers_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_providers_tab(self, ui, ctx);
    }

    fn show_lab_tab(&mut self, ui: &mut egui::Ui, ctx: &egui::Context) {
        ui::tabs::show_lab_tab(self, ui, ctx);
    }

    fn show_network_tab(&mut self, ui: &mut egui::Ui) {
        ui::tabs::show_network_tab(self, ui);
    }

    fn show_stats_tab(&mut self, ui: &mut egui::Ui) {
        ui::tabs::show_stats_tab(self, ui);
    }
}
