use eframe::egui;
use std::process::Command;

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([400.0, 500.0])
            .with_title("DNS Manager - Windows"),
        ..Default::default()
    };

    eframe::run_native(
        "DNS Manager",
        options,
        Box::new(|cc| Box::new(DNSManager::new(cc))),
    )
}

#[derive(Default)]
struct DNSManager {
    status: String,
    current_dns: String,
}

impl DNSManager {
    fn new(cc: &eframe::CreationContext<'_>) -> Self {
        // üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê 2025 - –ü—É—Ç—å –ê–Ω–¥—Ä–æ–º–µ–¥—ã üåå
        let mut style = (*cc.egui_ctx.style()).clone();
        style.visuals.dark_mode = true; // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–æ—Å–º–æ—Å–∞

        // üåå –ì–ª—É–±–æ–∫–∏–π –∫–æ—Å–º–æ—Å - —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        style.visuals.window_fill = egui::Color32::from_rgb(15, 23, 42); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –∫–æ—Å–º–æ—Å
        style.visuals.panel_fill = egui::Color32::from_rgb(30, 41, 59); // –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Å–∏–Ω–∏–π
        style.visuals.faint_bg_color = egui::Color32::from_rgb(51, 65, 85);

        // üõ∞Ô∏è –ö–∏–±–µ—Ä-–ø–∞–Ω–∫ –∫–Ω–æ–ø–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å –±–∏—Ä—é–∑–æ–≤—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
        style.visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(147, 51, 234); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (Claude-style)
        style.visuals.widgets.hovered.bg_fill = egui::Color32::from_rgb(59, 130, 246); // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        style.visuals.widgets.active.bg_fill = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π

        // üîÆ –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è - –∫–∞–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏
        style.visuals.widgets.inactive.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.hovered.rounding = egui::Rounding::same(16.0);
        style.visuals.widgets.active.rounding = egui::Rounding::same(16.0);

        // ‚ö° –ù–µ–æ–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –∫–∏–±–µ—Ä-–ø–∞–Ω–∫ —Å—Ç–∏–ª—å
        style.visuals.widgets.inactive.fg_stroke.color = egui::Color32::from_rgb(236, 254, 255); // –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
        style.visuals.widgets.hovered.fg_stroke.color = egui::Color32::from_rgb(6, 182, 212); // –ë–∏—Ä—é–∑–æ–≤—ã–π
        style.visuals.widgets.active.fg_stroke.color = egui::Color32::WHITE;

        // üåü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤
        style.visuals.override_text_color = Some(egui::Color32::from_rgb(148, 163, 184)); // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π

        cc.egui_ctx.set_style(style);

        Self {
            status: "üöÄ Ready for space launch!".to_string(),
            current_dns: String::new(),
        }
    }

    fn run_powershell_command(command: &str) -> Result<String, String> {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ipconfig –∏–ª–∏ netsh - –∏—Å–ø–æ–ª—å–∑—É–µ–º cmd —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
        if command.contains("ipconfig") || command.contains("netsh") {
            let output = Command::new(r"C:\Windows\System32\cmd.exe")
                .arg("/C")
                .arg(command)
                .output()
                .map_err(|e| format!("Failed to execute command: {}", e))?;

            let stdout = String::from_utf8_lossy(&output.stdout).trim().to_string();
            let stderr = String::from_utf8_lossy(&output.stderr).trim().to_string();

            if output.status.success() {
                Ok(stdout)
            } else {
                Err(stderr)
            }
        } else {
            // –î–ª—è PowerShell –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell
            let output = Command::new(r"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe")
                .arg("-Command")
                .arg(command)
                .output()
                .map_err(|e| format!("Failed to execute command: {}", e))?;

            let stdout = String::from_utf8_lossy(&output.stdout).trim().to_string();
            let stderr = String::from_utf8_lossy(&output.stderr).trim().to_string();

            if output.status.success() {
                Ok(stdout)
            } else {
                Err(stderr)
            }
        }
    }

    fn get_current_dns() -> Result<String, String> {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö DNS —Å–µ—Ä–≤–µ—Ä–æ–≤
        let ps_output = Self::run_powershell_command("Get-DnsClientServerAddress | Where-Object { $_.AddressFamily -eq 2 } | Select-Object -ExpandProperty ServerAddresses");

        if let Ok(dns_list) = ps_output {
            if !dns_list.is_empty() && dns_list != "" {
                let dns_servers: Vec<&str> = dns_list.split_whitespace().collect();
                if !dns_servers.is_empty() {
                    let addresses = dns_servers.join(", ");
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ DHCP –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    if Self::is_dhcp_dns(&addresses) {
                        return Ok(format!("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç (DHCP): {}", addresses));
                    } else {
                        return Ok(addresses);
                    }
                }
            }
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º ipconfig –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
        let output = Command::new(r"C:\Windows\System32\ipconfig.exe")
            .arg("/all")
            .output()
            .map_err(|e| format!("Failed to execute ipconfig: {}", e))?;

        let stdout = String::from_utf8_lossy(&output.stdout).trim().to_string();

        if output.status.success() {
            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let lines: Vec<&str> = stdout.lines().collect();
            let mut dns_servers = Vec::new();
            let mut is_dhcp = false;

            for line in lines {
                if line.contains("DNS servers configured through DHCP") {
                    is_dhcp = true;
                }
                if line.contains("DNS Servers") && !line.contains("configured through DHCP") {
                    let parts: Vec<&str> = line.split(':').collect();
                    if parts.len() > 1 {
                        let ip_part = parts[1].trim();
                        if !ip_part.is_empty() && !ip_part.contains("None") {
                            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
                            let ips: Vec<&str> = ip_part.split(',').collect();
                            for ip in ips {
                                let clean_ip = ip.trim();
                                if !clean_ip.is_empty() && clean_ip != "0.0.0.0" {
                                    dns_servers.push(clean_ip.to_string());
                                }
                            }
                        }
                    }
                }
            }

            if dns_servers.is_empty() {
                Ok("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç (DHCP): –∞–¥—Ä–µ—Å–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã".to_string())
            } else if is_dhcp {
                Ok(format!("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç (DHCP): {}", dns_servers.join(", ")))
            } else {
                Ok(dns_servers.join(", "))
            }
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr).trim().to_string();
            Err(stderr)
        }
    }

    fn is_dhcp_dns(addresses: &str) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –∞–¥—Ä–µ—Å–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—Å–∫–∏–µ DNS
        let dhcp_indicators = ["192.168.", "10.", "172."];
        addresses.split(", ").any(|addr| {
            dhcp_indicators.iter().any(|indicator| addr.starts_with(indicator))
        })
    }

    fn set_dns(primary: &str, secondary: &str) -> Result<String, String> {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DNS –¥–ª—è –≤—Å–µ—Ö
        let command = format!(
            r#"Get-NetAdapter | Where-Object {{ $_.Status -eq 'Up' }} | ForEach-Object {{
    Set-DnsClientServerAddress -InterfaceAlias $_.Name -ServerAddresses ('{0}','{1}')
}}"#,
            primary, secondary
        );
        Self::run_powershell_command(&command)
    }

    fn reset_dns() -> Result<String, String> {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º DNS –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∫ DHCP
        let command = r#"Get-NetAdapter | Where-Object { $_.Status -eq 'Up' } | ForEach-Object {
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç DHCP
    Set-DnsClientServerAddress -InterfaceAlias $_.Name -ResetServerAddresses
    # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º DHCP –¥–ª—è DNS
    Set-NetIPInterface -InterfaceAlias $_.Name -Dhcp Enabled
}"#;
        Self::run_powershell_command(command)
    }
}

impl eframe::App for DNSManager {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical_centered(|ui| {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - Space Mission
                ui.add_space(10.0);
                ui.heading("üöÄ DNS Manager - Andromeda Mission");
                ui.add_space(5.0);
                ui.label("üåå DNS server management in deep space");
                ui.add_space(20.0);

                // –ö–Ω–æ–ø–∫–∏
                let button_width = 350.0;
                let button_height = 35.0;

                // üõ∞Ô∏è Satellite Control
                ui.label("üõ∞Ô∏è Satellite control:");
                ui.label("üîÑ Intelligent switching between galaxies");
                if ui.add_sized([button_width, button_height], egui::Button::new("üöÄ Launch/Landing DNS")).clicked() {
                    self.status = "üõ∏ Navigation system activated...".to_string();
                    ctx.request_repaint();

                    match Self::get_current_dns() {
                        Ok(current) => {
                            if current.contains("1.1.1.1") || current.contains("8.8.8.8") {
                                // Reset to automatic
                                match Self::reset_dns() {
                                    Ok(_) => self.status = "üîÑ Returned to autopilot".to_string(),
                                    Err(e) => self.status = format!("üí• System failure: {}", e),
                                }
                            } else {
                                // Set Cloudflare
                                match Self::set_dns("1.1.1.1", "1.0.0.1") {
                                    Ok(_) => self.status = "üéâ Course set to Cloudflare!".to_string(),
                                    Err(e) => self.status = format!("üí• Engines failed to start: {}", e),
                                }
                            }
                        }
                        Err(e) => self.status = format!("üí• Navigation system failure: {}", e),
                    }
                }

                ui.add_space(15.0);
                ui.label("ü™ê Known DNS planets:");

                // –ö–Ω–æ–ø–∫–∞ 2: Cloudflare - Cloud Planet
                if ui.add_sized([button_width, button_height], egui::Button::new("‚òÅÔ∏è Cloudflare - Cloud Planet (1.1.1.1)")).clicked() {
                    self.status = "üõ∏ Entering Cloudflare orbit: 1.1.1.1, 1.0.0.1...".to_string();
                    ctx.request_repaint();

                    match Self::set_dns("1.1.1.1", "1.0.0.1") {
                        Ok(_) => self.status = "üéâ Arrived at Cloudflare: 1.1.1.1, 1.0.0.1! Mission accomplished!".to_string(),
                        Err(e) => self.status = format!("üí• Ship crashed: {}", e),
                    }
                }

                ui.add_space(10.0);

                // –ö–Ω–æ–ø–∫–∞ 3: Google - Search Planet
                if ui.add_sized([button_width, button_height], egui::Button::new("üîç Google - Search Planet (8.8.8.8)")).clicked() {
                    self.status = "üõ∏ Activating Google hyperdrive: 8.8.8.8, 8.8.4.4...".to_string();
                    ctx.request_repaint();

                    match Self::set_dns("8.8.8.8", "8.8.4.4") {
                        Ok(_) => self.status = "üéâ Welcome to Google: 8.8.8.8, 8.8.4.4! Data found!".to_string(),
                        Err(e) => self.status = format!("üí• Hyperspace jump failed: {}", e),
                    }
                }

                ui.add_space(15.0);
                ui.label("üå† Space telemetry:");

                // –ö–Ω–æ–ø–∫–∞ 4: Future Missions
                ui.add_sized([button_width, button_height], egui::Button::new("üõ∏ Future Missions").sense(egui::Sense::hover()));

                ui.add_space(20.0);

                // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ - Space Scanning
                if ui.add_sized([button_width, button_height], egui::Button::new("üî≠ Space Scanning")).clicked() {
                    self.status = "üî≠ Telescope activating...".to_string();
                    ctx.request_repaint();

                    match Self::get_current_dns() {
                        Ok(dns) => {
                            self.current_dns = dns.clone();
                            if dns.contains("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π") {
                                self.status = format!("üåå Signal received: {}", dns);
                            } else {
                                self.status = format!("üõ∞Ô∏è Coordinates received: {}", dns);
                            }
                        }
                        Err(e) => {
                            self.status = format!("üí´ Cosmic noise: {}", e);
                        }
                    }
                }

                ui.add_space(15.0);

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ DNS - Space Navigation
                let dns_text = if !self.current_dns.is_empty() && !self.current_dns.contains("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç (DHCP)") {
                    format!("üõ∞Ô∏è Current coordinates: {}", self.current_dns)
                } else if self.current_dns.contains("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç (DHCP)") {
                    format!("üõ∞Ô∏è Current coordinates: {}", self.current_dns)
                } else {
                    "üî≠ Use telescope to scan coordinates".to_string()
                };

                // DNS with context menu
                let dns_label = ui.selectable_label(true, &dns_text);
                dns_label.context_menu(|ui| {
                    if ui.button("Copy DNS").clicked() {
                        ui.output_mut(|o| o.copied_text = self.current_dns.clone());
                        ui.close_menu();
                    }
                    if ui.button("Copy full text").clicked() {
                        ui.output_mut(|o| o.copied_text = dns_text.clone());
                        ui.close_menu();
                    }
                });

                ui.add_space(10.0);

                // Status with context menu
                let status_label = ui.selectable_label(true, &self.status);
                status_label.context_menu(|ui| {
                    if ui.button("Copy status").clicked() {
                        ui.output_mut(|o| o.copied_text = self.status.clone());
                        ui.close_menu();
                    }
                });
            });
        });
    }
}